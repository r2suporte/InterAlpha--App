const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function debugFunctions() {
  console.log('üîç Investigando o problema cp.cliente_id...\n');

  try {
    // Vamos verificar se conseguimos desabilitar temporariamente os triggers
    console.log('üß™ Testando inser√ß√£o com triggers desabilitados...');

    // Primeiro, vamos tentar uma inser√ß√£o normal para confirmar o erro
    const { data: normalInsert, error: normalError } = await supabase
      .from('ordens_servico')
      .insert({
        titulo: 'Teste Normal',
        descricao: 'Teste para confirmar erro',
        status: 'aberta',
        prioridade: 'baixa',
      })
      .select();

    if (normalError) {
      console.log(
        '‚ùå Erro confirmado na inser√ß√£o normal:',
        normalError.message
      );

      // Vamos verificar se h√° triggers espec√≠ficos que podemos identificar
      console.log('\nüîç Analisando o erro...');

      if (normalError.message.includes('cp.cliente_id')) {
        console.log('‚úÖ Confirmado: O erro est√° relacionado a cp.cliente_id');
        console.log(
          'üìç Isso indica que h√° um trigger ou constraint que executa uma fun√ß√£o problem√°tica'
        );

        // Vamos tentar identificar qual migra√ß√£o pode ter criado o problema
        console.log(
          '\nüìã Baseado nas migra√ß√µes analisadas, os poss√≠veis culpados s√£o:'
        );
        console.log(
          '1. trigger_email_ordem_servico (criado em 20250126130000_add_email_triggers.sql)'
        );
        console.log('2. processar_emails_pendentes (m√∫ltiplas vers√µes)');
        console.log('3. Alguma constraint ou trigger n√£o identificado');

        // Vamos verificar se o problema est√° na fun√ß√£o trigger_email_ordem_servico
        console.log(
          '\nüéØ Hip√≥tese: O trigger trigger_email_ordem_servico pode estar chamando uma fun√ß√£o problem√°tica'
        );
        console.log(
          'üìù Vamos verificar se podemos desabilitar temporariamente este trigger...'
        );

        return {
          error: normalError,
          analysis:
            'Erro confirmado relacionado a cp.cliente_id em trigger ou fun√ß√£o ativa',
        };
      }
    } else {
      console.log('‚úÖ Inser√ß√£o bem-sucedida (inesperado):', normalInsert);
      return { success: true, data: normalInsert };
    }
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return { error };
  }
}

async function main() {
  const result = await debugFunctions();

  if (result.error) {
    console.log('\nüîß PR√ìXIMOS PASSOS RECOMENDADOS:');
    console.log(
      '1. Verificar se h√° uma vers√£o antiga da fun√ß√£o trigger_email_ordem_servico'
    );
    console.log(
      '2. Recriar a fun√ß√£o trigger_email_ordem_servico sem refer√™ncias a cp.cliente_id'
    );
    console.log('3. Verificar se h√° outros triggers n√£o identificados');
    console.log(
      '4. Considerar desabilitar temporariamente os triggers de email'
    );
  }
}

main();
