require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function fixClienteIdFinal() {
  console.log('üîß Aplicando corre√ß√£o definitiva para cliente_id...\n');
  
  try {
    // Primeiro, vamos tentar alterar a coluna diretamente via SQL
    console.log('1. Tentando alterar a coluna cliente_id para permitir NULL...');
    
    const { data: alterResult, error: alterError } = await supabase
      .from('ordens_servico')
      .select('id')
      .limit(1);
    
    if (alterError) {
      console.log('‚ùå Erro ao acessar tabela:', alterError);
      return;
    }
    
    console.log('‚úÖ Tabela acess√≠vel');
    
    // Vamos tentar inserir diretamente com SQL raw
    console.log('\n2. Testando inser√ß√£o com SQL raw...');
    
    // Buscar um cliente portal
    const { data: clientePortal, error: clienteError } = await supabase
      .from('clientes_portal')
      .select('id, nome')
      .limit(1)
      .single();
    
    if (clienteError) {
      console.log('‚ùå Erro ao buscar cliente portal:', clienteError);
      return;
    }
    
    console.log(`‚úÖ Cliente portal encontrado: ${clientePortal.nome}`);
    
    // Tentar inser√ß√£o com SQL direto usando o client
    console.log('\n3. Tentando inser√ß√£o via client com dados expl√≠citos...');
    
    const ordemData = {
      cliente_portal_id: clientePortal.id,
      titulo: 'Teste Final',
      descricao: 'Teste de corre√ß√£o definitiva',
      status: 'aberta',
      prioridade: 'media',
      valor_servico: 150.00,
      cliente_id: null // Explicitamente null
    };
    
    const { data: ordem, error: ordemError } = await supabase
      .from('ordens_servico')
      .insert(ordemData)
      .select();
    
    if (ordemError) {
      console.log('‚ùå Erro na inser√ß√£o:', ordemError);
      
      // Se ainda der erro, vamos tentar sem especificar cliente_id
      console.log('\n4. Tentando inser√ß√£o sem especificar cliente_id...');
      
      const ordemDataSemClienteId = {
        cliente_portal_id: clientePortal.id,
        titulo: 'Teste Final Sem Cliente ID',
        descricao: 'Teste sem especificar cliente_id',
        status: 'aberta',
        prioridade: 'media',
        valor_servico: 150.00
      };
      
      const { data: ordem2, error: ordemError2 } = await supabase
        .from('ordens_servico')
        .insert(ordemDataSemClienteId)
        .select();
      
      if (ordemError2) {
        console.log('‚ùå Erro na segunda tentativa:', ordemError2);
        
        // √öltima tentativa: verificar se h√° um valor padr√£o ou trigger
        console.log('\n5. Verificando se h√° algum valor padr√£o ou trigger...');
        
        // Vamos tentar inserir com um cliente_id v√°lido para ver se funciona
        const { data: clientes, error: clientesError } = await supabase
          .from('clientes')
          .select('id, nome')
          .limit(1)
          .single();
        
        if (!clientesError && clientes) {
          console.log(`‚úÖ Cliente encontrado: ${clientes.nome}`);
          
          const ordemDataComCliente = {
            cliente_portal_id: clientePortal.id,
            cliente_id: clientes.id,
            titulo: 'Teste Com Cliente ID',
            descricao: 'Teste com cliente_id v√°lido',
            status: 'aberta',
            prioridade: 'media',
            valor_servico: 150.00
          };
          
          const { data: ordem3, error: ordemError3 } = await supabase
            .from('ordens_servico')
            .insert(ordemDataComCliente)
            .select();
          
          if (ordemError3) {
            console.log('‚ùå Erro mesmo com cliente_id v√°lido:', ordemError3);
          } else {
            console.log('‚úÖ Inser√ß√£o funcionou COM cliente_id v√°lido!');
            console.log('üìã Ordem criada:', ordem3[0]);
            
            // Agora vamos tentar atualizar para NULL
            console.log('\n6. Tentando atualizar cliente_id para NULL...');
            
            const { data: updateResult, error: updateError } = await supabase
              .from('ordens_servico')
              .update({ cliente_id: null })
              .eq('id', ordem3[0].id)
              .select();
            
            if (updateError) {
              console.log('‚ùå Erro ao atualizar para NULL:', updateError);
            } else {
              console.log('‚úÖ Atualiza√ß√£o para NULL funcionou!');
              console.log('üìã Ordem atualizada:', updateResult[0]);
            }
          }
        } else {
          console.log('‚ùå Nenhum cliente encontrado na tabela clientes');
        }
        
      } else {
        console.log('‚úÖ Segunda tentativa funcionou!');
        console.log('üìã Ordem criada:', ordem2[0]);
      }
    } else {
      console.log('‚úÖ Inser√ß√£o funcionou!');
      console.log('üìã Ordem criada:', ordem[0]);
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

fixClienteIdFinal().catch(console.error);