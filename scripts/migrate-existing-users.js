require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  console.log(
    'Certifique-se de que NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY est√£o definidas no .env.local'
  );
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

// Mapeamento de roles antigas para novas
const ROLE_MIGRATION_MAP = {
  // Roles antigas -> Novas roles
  admin: 'admin',
  user: 'user',
  technician: 'technician',
  tecnico: 'technician', // Normalizar varia√ß√µes
  atendente: 'atendente',
  manager: 'gerente_adm',
  gerente: 'gerente_adm',
  supervisor: 'supervisor_tecnico',
  diretor: 'diretor',
  gerente_adm: 'gerente_adm',
  gerente_financeiro: 'gerente_financeiro',
  supervisor_tecnico: 'supervisor_tecnico',
};

// Roles v√°lidas no novo sistema
const VALID_ROLES = [
  'admin',
  'diretor',
  'gerente_adm',
  'gerente_financeiro',
  'supervisor_tecnico',
  'technician',
  'atendente',
  'user',
];

async function migrateExistingUsers() {
  try {
    console.log('üîÑ Iniciando migra√ß√£o de usu√°rios existentes...\n');

    // 1. Buscar todos os usu√°rios existentes
    console.log('üìã Buscando usu√°rios existentes...');
    const { data: users, error: fetchError } = await supabase
      .from('users')
      .select('id, email, name, role, phone, created_at, updated_at');

    if (fetchError) {
      throw new Error(`Erro ao buscar usu√°rios: ${fetchError.message}`);
    }

    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è Nenhum usu√°rio encontrado para migrar.');
      return;
    }

    console.log(`‚úÖ Encontrados ${users.length} usu√°rios para migrar\n`);

    // 2. Analisar roles existentes
    const roleStats = {};
    users.forEach(user => {
      const currentRole = user.role || 'user';
      roleStats[currentRole] = (roleStats[currentRole] || 0) + 1;
    });

    console.log('üìä Estat√≠sticas de roles atuais:');
    Object.entries(roleStats).forEach(([role, count]) => {
      const newRole = ROLE_MIGRATION_MAP[role] || 'atendente';
      console.log(`   ${role} (${count} usu√°rios) ‚Üí ${newRole}`);
    });
    console.log('');

    // 3. Confirmar migra√ß√£o
    console.log(
      '‚ö†Ô∏è Esta opera√ß√£o ir√° atualizar as roles de todos os usu√°rios.'
    );
    console.log(
      '   Certifique-se de ter um backup do banco de dados antes de continuar.\n'
    );

    // Para ambiente de produ√ß√£o, adicionar confirma√ß√£o interativa
    if (process.env.NODE_ENV === 'production') {
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
      });

      const answer = await new Promise(resolve => {
        rl.question('Deseja continuar com a migra√ß√£o? (sim/n√£o): ', resolve);
      });
      rl.close();

      if (answer.toLowerCase() !== 'sim') {
        console.log('‚ùå Migra√ß√£o cancelada pelo usu√°rio.');
        return;
      }
    }

    // 4. Executar migra√ß√£o
    console.log('üîÑ Executando migra√ß√£o...\n');

    let successCount = 0;
    let errorCount = 0;
    const migrationResults = [];

    for (const user of users) {
      try {
        const currentRole = user.role || 'user';
        const newRole = ROLE_MIGRATION_MAP[currentRole] || 'atendente';

        // Verificar se a role precisa ser atualizada
        if (currentRole === newRole) {
          console.log(`‚è≠Ô∏è ${user.email}: Role j√° est√° correta (${newRole})`);
          migrationResults.push({
            email: user.email,
            oldRole: currentRole,
            newRole,
            status: 'unchanged',
          });
          continue;
        }

        // Atualizar role do usu√°rio
        const { error: updateError } = await supabase
          .from('users')
          .update({
            role: newRole,
            updated_at: new Date().toISOString(),
          })
          .eq('id', user.id);

        if (updateError) {
          throw new Error(`Erro ao atualizar usu√°rio: ${updateError.message}`);
        }

        console.log(`‚úÖ ${user.email}: ${currentRole} ‚Üí ${newRole}`);
        migrationResults.push({
          email: user.email,
          oldRole: currentRole,
          newRole,
          status: 'updated',
        });
        successCount++;
      } catch (error) {
        console.error(`‚ùå ${user.email}: Erro na migra√ß√£o - ${error.message}`);
        migrationResults.push({
          email: user.email,
          oldRole: user.role,
          newRole: 'error',
          status: 'error',
          error: error.message,
        });
        errorCount++;
      }
    }

    // 5. Relat√≥rio final
    console.log('\nüìä Relat√≥rio de Migra√ß√£o:');
    console.log(`   ‚úÖ Sucessos: ${successCount}`);
    console.log(`   ‚ùå Erros: ${errorCount}`);
    console.log(
      `   ‚è≠Ô∏è Inalterados: ${users.length - successCount - errorCount}`
    );

    // 6. Verificar integridade ap√≥s migra√ß√£o
    console.log('\nüîç Verificando integridade ap√≥s migra√ß√£o...');
    const { data: updatedUsers, error: verifyError } = await supabase
      .from('users')
      .select('role')
      .not('role', 'in', `(${VALID_ROLES.map(r => `"${r}"`).join(',')})`);

    if (verifyError) {
      console.error('‚ùå Erro na verifica√ß√£o:', verifyError.message);
    } else if (updatedUsers && updatedUsers.length > 0) {
      console.error(
        `‚ùå Encontradas ${updatedUsers.length} roles inv√°lidas ap√≥s migra√ß√£o!`
      );
      updatedUsers.forEach(user => {
        console.error(`   Role inv√°lida: ${user.role}`);
      });
    } else {
      console.log('‚úÖ Todas as roles est√£o v√°lidas ap√≥s migra√ß√£o');
    }

    // 7. Salvar log de migra√ß√£o
    const migrationLog = {
      timestamp: new Date().toISOString(),
      totalUsers: users.length,
      successCount,
      errorCount,
      results: migrationResults,
    };

    // Salvar log em arquivo (opcional)
    const fs = require('fs');
    const path = require('path');
    const logPath = path.join(__dirname, `migration-log-${Date.now()}.json`);
    fs.writeFileSync(logPath, JSON.stringify(migrationLog, null, 2));
    console.log(`\nüìù Log de migra√ß√£o salvo em: ${logPath}`);

    console.log('\nüéâ Migra√ß√£o conclu√≠da!');
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
    process.exit(1);
  }
}

// Fun√ß√£o para reverter migra√ß√£o (rollback)
async function rollbackMigration(logFilePath) {
  try {
    console.log('üîÑ Iniciando rollback da migra√ß√£o...\n');

    if (!logFilePath) {
      console.error('‚ùå Caminho do arquivo de log √© obrigat√≥rio para rollback');
      return;
    }

    const fs = require('fs');
    if (!fs.existsSync(logFilePath)) {
      console.error('‚ùå Arquivo de log n√£o encontrado:', logFilePath);
      return;
    }

    const migrationLog = JSON.parse(fs.readFileSync(logFilePath, 'utf8'));
    const updatedUsers = migrationLog.results.filter(
      r => r.status === 'updated'
    );

    console.log(`üìã Revertendo ${updatedUsers.length} usu√°rios...`);

    for (const userLog of updatedUsers) {
      try {
        const { error } = await supabase
          .from('users')
          .update({ role: userLog.oldRole })
          .eq('email', userLog.email);

        if (error) {
          throw new Error(error.message);
        }

        console.log(
          `‚úÖ ${userLog.email}: ${userLog.newRole} ‚Üí ${userLog.oldRole}`
        );
      } catch (error) {
        console.error(
          `‚ùå ${userLog.email}: Erro no rollback - ${error.message}`
        );
      }
    }

    console.log('\nüéâ Rollback conclu√≠do!');
  } catch (error) {
    console.error('‚ùå Erro durante rollback:', error.message);
  }
}

// Fun√ß√£o para criar usu√°rios de teste com as novas roles
async function createTestUsersWithNewRoles() {
  try {
    console.log('üß™ Criando usu√°rios de teste com novas roles...\n');

    const testUsers = [
      {
        email: 'admin@interalpha.com',
        password: 'admin123',
        name: 'Administrador Sistema',
        role: 'admin',
        phone: '(11) 99999-0001',
      },
      {
        email: 'gerente.adm@interalpha.com',
        password: 'gerente123',
        name: 'Gerente Administrativo',
        role: 'gerente_adm',
        phone: '(11) 99999-0002',
      },
      {
        email: 'gerente.financeiro@interalpha.com',
        password: 'financeiro123',
        name: 'Gerente Financeiro',
        role: 'gerente_financeiro',
        phone: '(11) 99999-0003',
      },
      {
        email: 'tecnico@interalpha.com',
        password: 'tecnico123',
        name: 'T√©cnico Especialista',
        role: 'technician',
        phone: '(11) 99999-0004',
      },
      {
        email: 'supervisor.tecnico@interalpha.com',
        password: 'supervisor123',
        name: 'Supervisor T√©cnico',
        role: 'supervisor_tecnico',
        phone: '(11) 99999-0007',
      },
      {
        email: 'diretor@interalpha.com',
        password: 'diretor123',
        name: 'Diretor Geral',
        role: 'diretor',
        phone: '(11) 99999-0006',
      },
      {
        email: 'atendente@interalpha.com',
        password: 'atendente123',
        name: 'Atendente Recep√ß√£o',
        role: 'atendente',
        phone: '(11) 99999-0005',
      },
    ];

    for (const userData of testUsers) {
      try {
        // Criar usu√°rio no Supabase Auth
        const { data: authUser, error: authError } =
          await supabase.auth.admin.createUser({
            email: userData.email,
            password: userData.password,
            email_confirm: true,
            user_metadata: {
              name: userData.name,
              phone: userData.phone,
            },
          });

        if (authError && !authError.message.includes('already registered')) {
          throw new Error(authError.message);
        }

        // Criar/atualizar usu√°rio na tabela users
        const { error: upsertError } = await supabase.from('users').upsert(
          {
            email: userData.email,
            name: userData.name,
            role: userData.role,
            phone: userData.phone,
          },
          {
            onConflict: 'email',
          }
        );

        if (upsertError) {
          throw new Error(upsertError.message);
        }

        console.log(
          `‚úÖ ${userData.email} (${userData.role}): Criado com sucesso`
        );
      } catch (error) {
        console.error(`‚ùå ${userData.email}: ${error.message}`);
      }
    }

    console.log('\nüéâ Usu√°rios de teste criados!');
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rios de teste:', error.message);
  }
}

// Executar script baseado nos argumentos da linha de comando
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'migrate':
      migrateExistingUsers();
      break;
    case 'rollback':
      rollbackMigration(args[1]);
      break;
    case 'test-users':
      createTestUsersWithNewRoles();
      break;
    default:
      console.log('üìñ Uso do script:');
      console.log(
        '   node scripts/migrate-existing-users.js migrate     # Migrar usu√°rios existentes'
      );
      console.log(
        '   node scripts/migrate-existing-users.js rollback <log-file>  # Reverter migra√ß√£o'
      );
      console.log(
        '   node scripts/migrate-existing-users.js test-users  # Criar usu√°rios de teste'
      );
      break;
  }
}

module.exports = {
  migrateExistingUsers,
  rollbackMigration,
  createTestUsersWithNewRoles,
  ROLE_MIGRATION_MAP,
  VALID_ROLES,
};
