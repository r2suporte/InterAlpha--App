#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Cores para output no terminal
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function execCommand(command, description) {
  log(`\nüîÑ ${description}...`, 'cyan');
  try {
    execSync(command, { stdio: 'inherit' });
    log(`‚úÖ ${description} conclu√≠do!`, 'green');
    return true;
  } catch (error) {
    log(`‚ùå Erro ao executar: ${description}`, 'red');
    log(error.message, 'red');
    return false;
  }
}

function checkFileExists(filePath) {
  return fs.existsSync(path.resolve(filePath));
}

function createDirectoryIfNotExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    log(`üìÅ Diret√≥rio criado: ${dirPath}`, 'yellow');
  }
}

// Comandos dispon√≠veis
const commands = {
  // Verifica√ß√£o de sa√∫de do projeto
  health: () => {
    log('\nüè• Verifica√ß√£o de Sa√∫de do Projeto', 'bright');
    log('=====================================', 'bright');

    const checks = [
      { name: 'package.json', path: 'package.json' },
      { name: 'tsconfig.json', path: 'tsconfig.json' },
      { name: 'next.config.js', path: 'next.config.js' },
      { name: 'tailwind.config.js', path: 'tailwind.config.js' },
      { name: 'ESLint config', path: 'eslint.config.js' },
      { name: 'Prettier config', path: '.prettierrc.js' },
      { name: '.env.local', path: '.env.local' },
      { name: 'node_modules', path: 'node_modules' },
    ];

    checks.forEach(check => {
      const exists = checkFileExists(check.path);
      const status = exists ? '‚úÖ' : '‚ùå';
      const color = exists ? 'green' : 'red';
      log(`${status} ${check.name}`, color);
    });

    // Verificar depend√™ncias cr√≠ticas
    log('\nüì¶ Verificando depend√™ncias cr√≠ticas...', 'cyan');
    try {
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      const criticalDeps = [
        'next',
        'react',
        'react-dom',
        'typescript',
        '@prisma/client',
        'zod',
        'tailwindcss',
      ];

      criticalDeps.forEach(dep => {
        const hasInDeps = packageJson.dependencies?.[dep];
        const hasInDevDeps = packageJson.devDependencies?.[dep];
        const exists = hasInDeps || hasInDevDeps;
        const status = exists ? '‚úÖ' : '‚ùå';
        const color = exists ? 'green' : 'red';
        log(`${status} ${dep}`, color);
      });
    } catch (error) {
      log('‚ùå Erro ao verificar package.json', 'red');
    }
  },

  // Limpeza de cache e arquivos tempor√°rios
  clean: () => {
    log('\nüßπ Limpeza de Cache e Arquivos Tempor√°rios', 'bright');
    log('==========================================', 'bright');

    const cleanCommands = [
      { cmd: 'rm -rf .next', desc: 'Removendo cache do Next.js' },
      { cmd: 'rm -rf node_modules/.cache', desc: 'Removendo cache do Node.js' },
      { cmd: 'rm -rf .swc', desc: 'Removendo cache do SWC' },
      { cmd: 'rm -rf coverage', desc: 'Removendo relat√≥rios de cobertura' },
      {
        cmd: 'rm -rf cypress/videos cypress/screenshots',
        desc: 'Removendo arquivos do Cypress',
      },
      {
        cmd: 'rm -rf testsprite_tests/reports',
        desc: 'Removendo relat√≥rios de teste',
      },
    ];

    cleanCommands.forEach(({ cmd, desc }) => {
      execCommand(cmd, desc);
    });

    log('\n‚ú® Limpeza conclu√≠da!', 'green');
  },

  // Instala√ß√£o e atualiza√ß√£o de depend√™ncias
  install: () => {
    log('\nüì¶ Instala√ß√£o de Depend√™ncias', 'bright');
    log('==============================', 'bright');

    execCommand('npm ci', 'Instalando depend√™ncias');
    execCommand('npx prisma generate', 'Gerando cliente Prisma');
  },

  // Verifica√ß√£o de c√≥digo
  lint: () => {
    log('\nüîç Verifica√ß√£o de C√≥digo', 'bright');
    log('========================', 'bright');

    execCommand('npx eslint . --ext .js,.jsx,.ts,.tsx', 'Executando ESLint');
    execCommand(
      'npx prettier --check .',
      'Verificando formata√ß√£o com Prettier'
    );
    execCommand('npx tsc --noEmit', 'Verificando tipos TypeScript');
  },

  // Corre√ß√£o autom√°tica de c√≥digo
  fix: () => {
    log('\nüîß Corre√ß√£o Autom√°tica de C√≥digo', 'bright');
    log('=================================', 'bright');

    execCommand(
      'npx eslint . --ext .js,.jsx,.ts,.tsx --fix',
      'Corrigindo problemas do ESLint'
    );
    execCommand('npx prettier --write .', 'Formatando c√≥digo com Prettier');
  },

  // Execu√ß√£o de testes
  test: () => {
    log('\nüß™ Execu√ß√£o de Testes', 'bright');
    log('====================', 'bright');

    execCommand('npm run test', 'Executando testes unit√°rios');
    execCommand('npm run test:coverage', 'Gerando relat√≥rio de cobertura');
  },

  // Verifica√ß√£o de seguran√ßa
  security: () => {
    log('\nüîí Verifica√ß√£o de Seguran√ßa', 'bright');
    log('===========================', 'bright');

    execCommand('npm audit', 'Auditoria de seguran√ßa do npm');
    execCommand(
      'node scripts/security-check.js',
      'Verifica√ß√£o de seguran√ßa customizada'
    );
  },

  // Build do projeto
  build: () => {
    log('\nüèóÔ∏è  Build do Projeto', 'bright');
    log('===================', 'bright');

    execCommand('npm run build', 'Construindo projeto para produ√ß√£o');
    execCommand('npm run lint', 'Verificando c√≥digo');
  },

  // Desenvolvimento completo (setup inicial)
  setup: () => {
    log('\nüöÄ Setup Completo do Ambiente de Desenvolvimento', 'bright');
    log('================================================', 'bright');

    // Criar diret√≥rios necess√°rios
    const dirs = [
      'logs',
      'temp',
      'docs/generated',
      'cypress/fixtures',
      'cypress/support',
      '__tests__/utils',
      '__tests__/components',
      '__tests__/api',
    ];

    dirs.forEach(dir => createDirectoryIfNotExists(dir));

    // Executar comandos de setup
    execCommand('npm ci', 'Instalando depend√™ncias');
    execCommand('npx prisma generate', 'Gerando cliente Prisma');
    execCommand('npm run lint:fix', 'Corrigindo problemas de c√≥digo');
    execCommand('node scripts/security-check.js', 'Verifica√ß√£o de seguran√ßa');

    log('\nüéâ Setup conclu√≠do! Ambiente pronto para desenvolvimento.', 'green');
  },

  // An√°lise de bundle
  analyze: () => {
    log('\nüìä An√°lise de Bundle', 'bright');
    log('===================', 'bright');

    execCommand('ANALYZE=true npm run build', 'Analisando bundle do Next.js');
  },

  // Atualiza√ß√£o de depend√™ncias
  update: () => {
    log('\n‚¨ÜÔ∏è  Atualiza√ß√£o de Depend√™ncias', 'bright');
    log('==============================', 'bright');

    execCommand('npm update', 'Atualizando depend√™ncias');
    execCommand('npm audit fix', 'Corrigindo vulnerabilidades');
    execCommand('npx prisma generate', 'Regenerando cliente Prisma');
  },

  // Informa√ß√µes do projeto
  info: () => {
    log('\nüìã Informa√ß√µes do Projeto', 'bright');
    log('=========================', 'bright');

    try {
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      log(`Nome: ${packageJson.name}`, 'cyan');
      log(`Vers√£o: ${packageJson.version}`, 'cyan');
      log(`Descri√ß√£o: ${packageJson.description || 'N/A'}`, 'cyan');

      log('\nüì¶ Scripts dispon√≠veis:', 'yellow');
      Object.keys(packageJson.scripts || {}).forEach(script => {
        log(`  ‚Ä¢ ${script}: ${packageJson.scripts[script]}`, 'white');
      });

      log('\nüîß Depend√™ncias principais:', 'yellow');
      Object.keys(packageJson.dependencies || {})
        .slice(0, 10)
        .forEach(dep => {
          log(`  ‚Ä¢ ${dep}: ${packageJson.dependencies[dep]}`, 'white');
        });
    } catch (error) {
      log('‚ùå Erro ao ler informa√ß√µes do projeto', 'red');
    }
  },
};

// Fun√ß√£o principal
function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (!command || command === 'help') {
    log('\nüõ†Ô∏è  Ferramentas de Desenvolvimento - InterAlpha', 'bright');
    log('===============================================', 'bright');
    log('\nComandos dispon√≠veis:', 'cyan');

    Object.keys(commands).forEach(cmd => {
      log(`  ‚Ä¢ ${cmd}`, 'yellow');
    });

    log('\nExemplos de uso:', 'cyan');
    log('  node scripts/dev-tools.js health', 'white');
    log('  node scripts/dev-tools.js setup', 'white');
    log('  node scripts/dev-tools.js lint', 'white');
    log('  node scripts/dev-tools.js clean', 'white');

    return;
  }

  if (commands[command]) {
    commands[command]();
  } else {
    log(`‚ùå Comando n√£o encontrado: ${command}`, 'red');
    log('Use "help" para ver os comandos dispon√≠veis.', 'yellow');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { commands, log, execCommand };
