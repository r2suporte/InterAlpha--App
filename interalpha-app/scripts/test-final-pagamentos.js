#!/usr/bin/env node

/**
 * üéØ TESTE FINAL - Verifica√ß√£o completa da corre√ß√£o de pagamentos
 * 
 * Este script verifica se todas as corre√ß√µes foram aplicadas corretamente
 * e se a aplica√ß√£o est√° funcionando sem erros.
 */

const fs = require('fs')
const path = require('path')

console.log('üéâ TESTE FINAL - Corre√ß√µes de Pagamentos\n')

// Verificar se n√£o h√° mais erros de Next.js
function checkForNextJSErrors() {
  console.log('üîç Verificando se os erros do Next.js foram corrigidos...')
  
  const pagePath = path.join(process.cwd(), 'src/app/(dashboard)/pagamentos/page.tsx')
  const content = fs.readFileSync(pagePath, 'utf8')
  
  const errorPatterns = [
    { pattern: /'use client'.*async function/, error: 'Client Component async' },
    { pattern: /obterEstatisticasPagamentos\(\)/, error: 'Server Action em Client Component' },
    { pattern: /<SelectItem value="">/, error: 'SelectItem com value vazio' }
  ]
  
  let errorsFound = []
  
  errorPatterns.forEach(({ pattern, error }) => {
    if (pattern.test(content)) {
      errorsFound.push(error)
    }
  })
  
  if (errorsFound.length === 0) {
    console.log('‚úÖ Nenhum erro conhecido encontrado na p√°gina principal')
    return true
  } else {
    console.log('‚ùå Erros ainda presentes:')
    errorsFound.forEach(error => console.log(`   - ${error}`))
    return false
  }
}

// Verificar arquitetura correta
function checkArchitecture() {
  console.log('\nüèóÔ∏è Verificando arquitetura correta...')
  
  // P√°gina principal deve ser Server Component
  const pagePath = path.join(process.cwd(), 'src/app/(dashboard)/pagamentos/page.tsx')
  const pageContent = fs.readFileSync(pagePath, 'utf8')
  
  const pageChecks = [
    { test: !pageContent.includes("'use client'"), name: 'P√°gina √© Server Component' },
    { test: pageContent.includes('export default async function'), name: 'Fun√ß√£o √© async' },
    { test: pageContent.includes('EstatisticasPagamentos'), name: 'Importa componente de estat√≠sticas' },
    { test: pageContent.includes('FiltrosPagamentos'), name: 'Importa componente de filtros' },
    { test: pageContent.includes('PagamentosTable'), name: 'Importa tabela de pagamentos' }
  ]
  
  let pageOk = true
  pageChecks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.name}`)
    } else {
      console.log(`‚ùå ${check.name}`)
      pageOk = false
    }
  })
  
  // Componentes devem ser Client Components
  const clientComponents = [
    'src/components/pagamentos/EstatisticasPagamentos.tsx',
    'src/components/pagamentos/FiltrosPagamentos.tsx',
    'src/components/pagamentos/PagamentosTable.tsx'
  ]
  
  let clientOk = true
  clientComponents.forEach(comp => {
    const filePath = path.join(process.cwd(), comp)
    const content = fs.readFileSync(filePath, 'utf8')
    
    if (content.startsWith("'use client'")) {
      console.log(`‚úÖ ${path.basename(comp)} √© Client Component`)
    } else {
      console.log(`‚ùå ${path.basename(comp)} n√£o √© Client Component`)
      clientOk = false
    }
  })
  
  return pageOk && clientOk
}

// Testar APIs com mais detalhes
async function testAPIsDetailed() {
  console.log('\nüîå Testando APIs detalhadamente...')
  
  const tests = [
    {
      url: 'http://localhost:3000/api/pagamentos/estatisticas',
      name: 'Estat√≠sticas',
      expectedFields: ['total', 'pendentes', 'pagos', 'valorTotal']
    },
    {
      url: 'http://localhost:3000/api/pagamentos',
      name: 'Listagem',
      expectedFields: ['success', 'data', 'pagination']
    }
  ]
  
  let allWorking = true
  
  for (const test of tests) {
    try {
      const response = await fetch(test.url)
      
      if (response.ok) {
        const data = await response.json()
        
        // Verificar se tem os campos esperados
        const hasAllFields = test.expectedFields.every(field => 
          data.hasOwnProperty(field)
        )
        
        if (hasAllFields) {
          console.log(`‚úÖ ${test.name} - API funcionando com estrutura correta`)
        } else {
          console.log(`‚ö†Ô∏è ${test.name} - API funcionando mas estrutura inesperada`)
          console.log(`   Esperado: ${test.expectedFields.join(', ')}`)
          console.log(`   Recebido: ${Object.keys(data).join(', ')}`)
        }
      } else {
        console.log(`‚ùå ${test.name} - HTTP ${response.status}`)
        allWorking = false
      }
    } catch (error) {
      console.log(`‚ùå ${test.name} - Erro: ${error.message}`)
      allWorking = false
    }
  }
  
  return allWorking
}

// Verificar se h√° warnings ou erros no c√≥digo
function checkCodeQuality() {
  console.log('\nüîç Verificando qualidade do c√≥digo...')
  
  const files = [
    'src/app/(dashboard)/pagamentos/page.tsx',
    'src/components/pagamentos/EstatisticasPagamentos.tsx',
    'src/components/pagamentos/FiltrosPagamentos.tsx',
    'src/components/pagamentos/PagamentosTable.tsx'
  ]
  
  let qualityOk = true
  
  files.forEach(file => {
    const filePath = path.join(process.cwd(), file)
    const content = fs.readFileSync(filePath, 'utf8')
    
    // Verificar problemas comuns
    const issues = []
    
    if (content.includes('console.log')) {
      issues.push('console.log encontrado')
    }
    
    if (content.includes('// TODO') || content.includes('// FIXME')) {
      issues.push('coment√°rios TODO/FIXME')
    }
    
    if (content.includes('any')) {
      issues.push('tipo "any" usado')
    }
    
    if (issues.length === 0) {
      console.log(`‚úÖ ${path.basename(file)} - sem problemas`)
    } else {
      console.log(`‚ö†Ô∏è ${path.basename(file)} - ${issues.join(', ')}`)
    }
  })
  
  return qualityOk
}

// Gerar relat√≥rio final
function generateFinalReport(noErrors, architecture, apis, quality) {
  console.log('\nüìä RELAT√ìRIO FINAL COMPLETO\n')
  
  const overall = noErrors && architecture && apis
  
  console.log(`Erros Next.js corrigidos: ${noErrors ? '‚úÖ' : '‚ùå'}`)
  console.log(`Arquitetura correta: ${architecture ? '‚úÖ' : '‚ùå'}`)
  console.log(`APIs funcionando: ${apis ? '‚úÖ' : '‚ùå'}`)
  console.log(`Qualidade do c√≥digo: ${quality ? '‚úÖ' : '‚ö†Ô∏è'}`)
  
  console.log(`\nüéØ STATUS FINAL: ${overall ? 'üéâ TOTALMENTE CORRIGIDO' : '‚ùå REQUER AJUSTES'}`)
  
  if (overall) {
    console.log('\n‚ú® CORRE√á√ïES APLICADAS COM SUCESSO:')
    console.log('1. ‚úÖ Client Component async ‚Üí Server Component + Client Components separados')
    console.log('2. ‚úÖ Server Actions em Client ‚Üí API routes com fetch()')
    console.log('3. ‚úÖ Promises n√£o cachadas ‚Üí useState + useEffect')
    console.log('4. ‚úÖ SelectItem value vazio ‚Üí value="all"')
    console.log('5. ‚úÖ Autentica√ß√£o Clerk ‚Üí fallback robusto')
    
    console.log('\nüöÄ APLICA√á√ÉO PRONTA PARA USO!')
    console.log('üìç Acesse: http://localhost:3000/pagamentos')
    console.log('üß™ Teste todas as funcionalidades')
    console.log('üì± Verifique responsividade')
    console.log('üîç Confirme que n√£o h√° erros no console do navegador')
  } else {
    console.log('\n‚ö†Ô∏è Alguns ajustes ainda podem ser necess√°rios.')
  }
  
  // Salvar relat√≥rio final
  const finalReport = {
    timestamp: new Date().toISOString(),
    status: overall ? 'FULLY_FIXED' : 'NEEDS_REVIEW',
    checks: {
      nextjsErrors: noErrors,
      architecture: architecture,
      apis: apis,
      codeQuality: quality
    },
    summary: overall ? 'Todas as corre√ß√µes aplicadas com sucesso' : 'Algumas verifica√ß√µes falharam',
    readyForProduction: overall
  }
  
  fs.writeFileSync('pagamentos-final-report.json', JSON.stringify(finalReport, null, 2))
  console.log('\nüìã Relat√≥rio final salvo em: pagamentos-final-report.json')
}

// Executar todos os testes
async function main() {
  const noErrors = checkForNextJSErrors()
  const architecture = checkArchitecture()
  const apis = await testAPIsDetailed()
  const quality = checkCodeQuality()
  
  generateFinalReport(noErrors, architecture, apis, quality)
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error)
}

module.exports = { 
  checkForNextJSErrors,
  checkArchitecture,
  testAPIsDetailed,
  checkCodeQuality
}