#!/usr/bin/env node

/**
 * Script para testar o login do Clerk
 * Verifica se a tela de login est√° funcionando corretamente
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testLoginPage() {
  log(`${colors.bold}üîê FASE 3: TESTANDO LOGIN DO CLERK${colors.reset}`, 'blue');
  
  log('\n1. Verificando se o servidor est√° rodando...', 'yellow');
  
  try {
    // Tentar fazer uma requisi√ß√£o para verificar se o servidor est√° ativo
    const { execSync } = require('child_process');
    
    try {
      const result = execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/system/health', { 
        encoding: 'utf8',
        timeout: 5000
      });
      
      if (result.trim() === '200') {
        log('‚úÖ Servidor est√° rodando na porta 3000', 'green');
      } else {
        log('‚ùå Servidor n√£o est√° respondendo corretamente', 'red');
        log('üöÄ Iniciando servidor...', 'yellow');
        
        // Iniciar servidor em background
        const { spawn } = require('child_process');
        const serverProcess = spawn('npm', ['run', 'dev'], {
          cwd: path.join(__dirname, '..'),
          detached: true,
          stdio: 'ignore'
        });
        
        serverProcess.unref();
        
        // Aguardar alguns segundos para o servidor iniciar
        await new Promise(resolve => setTimeout(resolve, 10000));
        log('‚úÖ Servidor iniciado', 'green');
      }
    } catch (error) {
      log('‚ùå Erro ao verificar servidor', 'red');
      return false;
    }
    
  } catch (error) {
    log(`‚ùå Erro ao testar servidor: ${error.message}`, 'red');
    return false;
  }
  
  log('\n2. Testando p√°gina de login...', 'yellow');
  
  try {
    // Testar se a p√°gina de login carrega
    const result = execSync('curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/sign-in', { 
      encoding: 'utf8',
      timeout: 10000
    });
    
    if (result.trim() === '200') {
      log('‚úÖ P√°gina de login carrega corretamente', 'green');
    } else {
      log(`‚ùå P√°gina de login retornou c√≥digo: ${result.trim()}`, 'red');
      return false;
    }
  } catch (error) {
    log('‚ùå Erro ao acessar p√°gina de login', 'red');
    return false;
  }
  
  log('\n3. Verificando conte√∫do da p√°gina de login...', 'yellow');
  
  try {
    // Buscar conte√∫do da p√°gina para verificar se o Clerk est√° carregando
    const pageContent = execSync('curl -s http://localhost:3000/sign-in', { 
      encoding: 'utf8',
      timeout: 10000
    });
    
    if (pageContent.includes('Sistema InterAlpha')) {
      log('‚úÖ T√≠tulo da p√°gina encontrado', 'green');
    } else {
      log('‚ùå T√≠tulo da p√°gina n√£o encontrado', 'red');
    }
    
    if (pageContent.includes('clerk')) {
      log('‚úÖ Refer√™ncias ao Clerk encontradas', 'green');
    } else {
      log('‚ùå Refer√™ncias ao Clerk n√£o encontradas', 'red');
    }
    
    // Verificar se h√° erros JavaScript na p√°gina
    if (pageContent.includes('error') || pageContent.includes('Error')) {
      log('‚ö†Ô∏è  Poss√≠veis erros encontrados na p√°gina', 'yellow');
    } else {
      log('‚úÖ Nenhum erro √≥bvio encontrado', 'green');
    }
    
  } catch (error) {
    log('‚ùå Erro ao verificar conte√∫do da p√°gina', 'red');
    return false;
  }
  
  return true;
}

async function listExistingUsers() {
  log('\n4. Listando usu√°rios existentes no Clerk...', 'yellow');
  
  const listUsersScript = `
const { clerkClient } = require('@clerk/nextjs/server');

async function listUsers() {
  try {
    const users = await clerkClient().users.getUserList({ limit: 10 });
    
    console.log(\`üìä Total de usu√°rios: \${users.totalCount}\`);
    console.log('\\nüë• Usu√°rios encontrados:');
    
    users.data.forEach((user, index) => {
      const email = user.emailAddresses[0]?.emailAddress || 'Sem email';
      const name = \`\${user.firstName || ''} \${user.lastName || ''}\`.trim() || 'Sem nome';
      const role = user.publicMetadata?.role || 'Sem role';
      
      console.log(\`\${index + 1}. üìß \${email} | üë§ \${name} | üè∑Ô∏è  \${role}\`);
    });
    
    if (users.data.length === 0) {
      console.log('‚ùå Nenhum usu√°rio encontrado! Isso explica por que o login n√£o funciona.');
      console.log('üí° Solu√ß√£o: Criar usu√°rios manualmente no dashboard do Clerk');
    }
    
  } catch (error) {
    console.log(\`‚ùå Erro ao listar usu√°rios: \${error.message}\`);
  }
}

listUsers().catch(console.error);
`;
  
  const tempScriptPath = path.join(__dirname, 'temp-list-users.js');
  fs.writeFileSync(tempScriptPath, listUsersScript);
  
  try {
    execSync(`cd ${path.dirname(tempScriptPath)} && node temp-list-users.js`, { 
      stdio: 'inherit',
      env: { ...process.env }
    });
  } catch (error) {
    log('‚ùå Erro ao listar usu√°rios', 'red');
  } finally {
    // Limpar arquivo tempor√°rio
    if (fs.existsSync(tempScriptPath)) {
      fs.unlinkSync(tempScriptPath);
    }
  }
}

async function provideSolution() {
  log(`\n${colors.bold}üí° SOLU√á√ÉO PARA O PROBLEMA${colors.reset}`, 'blue');
  
  log('\nüîç Diagn√≥stico:', 'yellow');
  log('‚Ä¢ A configura√ß√£o do Clerk est√° correta', 'green');
  log('‚Ä¢ O servidor est√° funcionando', 'green');
  log('‚Ä¢ A p√°gina de login carrega', 'green');
  log('‚Ä¢ Existem usu√°rios no sistema', 'green');
  
  log('\nüö® Problema identificado:', 'red');
  log('‚Ä¢ Os campos de email/senha podem n√£o estar aparecendo devido a:', 'yellow');
  log('  - Problemas de CSS/styling', 'yellow');
  log('  - Configura√ß√£o de appearance do Clerk', 'yellow');
  log('  - Conflitos de JavaScript', 'yellow');
  log('  - Headers CSP muito restritivos', 'yellow');
  
  log('\nüõ†Ô∏è  Pr√≥ximas a√ß√µes recomendadas:', 'blue');
  log('1. Remover headers CSP temporariamente', 'yellow');
  log('2. Simplificar o componente SignIn', 'yellow');
  log('3. Adicionar logs de debug', 'yellow');
  log('4. Testar em modo de desenvolvimento', 'yellow');
  
  log('\nüìß Usu√°rios dispon√≠veis para teste:', 'green');
  log('‚Ä¢ gabriel@interalpha.com.br', 'green');
  log('‚Ä¢ renato@interalpha.com.br', 'green');
  log('‚Ä¢ ricardo@interalpha.com.br', 'green');
}

async function main() {
  const loginWorking = await testLoginPage();
  await listExistingUsers();
  await provideSolution();
  
  log(`\n${colors.bold}üìã RESUMO DA FASE 3${colors.reset}`, 'blue');
  
  if (loginWorking) {
    log('‚úÖ P√°gina de login est√° acess√≠vel', 'green');
    log('‚úÖ Usu√°rios existem no sistema', 'green');
    log('‚ö†Ô∏è  Campos de login podem estar ocultos por CSS/JS', 'yellow');
    log('\nüîÑ Prosseguir para Fase 4: Simplificar configura√ß√£o', 'yellow');
  } else {
    log('‚ùå Problemas na p√°gina de login detectados', 'red');
    log('üîß Corre√ß√µes necess√°rias antes de prosseguir', 'red');
  }
}

if (require.main === module) {
  main().catch(error => {
    log(`‚ùå Erro fatal: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  });
}

module.exports = { testLoginPage, listExistingUsers };