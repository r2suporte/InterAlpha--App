#!/usr/bin/env node

/**
 * Script de Inicializa√ß√£o do Servidor InterAlpha
 * Verifica configura√ß√µes e inicia o servidor de desenvolvimento
 */

const { spawn, execSync } = require('child_process');
const fs = require('fs').promises;

class ServerStarter {
  constructor() {
    this.serverProcess = null;
  }

  async start() {
    console.log('üöÄ Iniciando servidor InterAlpha...\n');

    try {
      // 1. Verifica√ß√µes pr√©-inicializa√ß√£o
      await this.preStartChecks();

      // 2. Preparar ambiente
      await this.prepareEnvironment();

      // 3. Iniciar servidor
      await this.startDevelopmentServer();

    } catch (error) {
      console.error('‚ùå Erro ao iniciar servidor:', error.message);
      process.exit(1);
    }
  }

  async preStartChecks() {
    console.log('üîç Verifica√ß√µes pr√©-inicializa√ß√£o...');

    // Verificar se estamos no diret√≥rio correto
    try {
      await fs.access('package.json');
      await fs.access('next.config.ts');
      console.log('  ‚úÖ Diret√≥rio do projeto correto');
    } catch {
      throw new Error('Execute este script no diret√≥rio raiz do projeto InterAlpha');
    }

    // Verificar vari√°veis essenciais
    try {
      const envContent = await fs.readFile('.env', 'utf8');
      if (!envContent.includes('DATABASE_URL')) {
        throw new Error('DATABASE_URL n√£o configurada no .env');
      }
      console.log('  ‚úÖ Vari√°veis de ambiente b√°sicas OK');
    } catch (error) {
      if (error.code === 'ENOENT') {
        throw new Error('Arquivo .env n√£o encontrado. Execute: node scripts/fix-runtime-issues.js');
      }
      throw error;
    }

    // Verificar depend√™ncias
    try {
      await fs.access('node_modules');
      console.log('  ‚úÖ Depend√™ncias instaladas');
    } catch {
      throw new Error('Depend√™ncias n√£o instaladas. Execute: npm install');
    }
  }

  async prepareEnvironment() {
    console.log('\nüîß Preparando ambiente...');

    try {
      // Gerar cliente Prisma
      console.log('  üìä Gerando cliente Prisma...');
      execSync('npx prisma generate', { stdio: 'pipe' });
      console.log('  ‚úÖ Cliente Prisma gerado');

      // Sincronizar schema do banco
      console.log('  üóÑÔ∏è  Sincronizando schema do banco...');
      execSync('npx prisma db push', { stdio: 'pipe' });
      console.log('  ‚úÖ Schema sincronizado');

    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erro na prepara√ß√£o do ambiente:', error.message);
      console.log('  üí° Continuando mesmo assim...');
    }
  }

  async startDevelopmentServer() {
    console.log('\nüåê Iniciando servidor de desenvolvimento...');
    console.log('  üìç URL: http://localhost:3000');
    console.log('  üîÑ Modo: Desenvolvimento com hot reload');
    console.log('  ‚èπÔ∏è  Para parar: Ctrl+C\n');

    // Iniciar servidor Next.js
    this.serverProcess = spawn('npm', ['run', 'dev'], {
      stdio: 'inherit',
      shell: true
    });

    // Handlers para encerramento graceful
    process.on('SIGINT', () => this.gracefulShutdown());
    process.on('SIGTERM', () => this.gracefulShutdown());

    // Aguardar processo do servidor
    this.serverProcess.on('close', (code) => {
      if (code !== 0) {
        console.log(`\n‚ùå Servidor encerrado com c√≥digo ${code}`);
      } else {
        console.log('\n‚úÖ Servidor encerrado normalmente');
      }
    });

    this.serverProcess.on('error', (error) => {
      console.error('\n‚ùå Erro no servidor:', error.message);
    });

    // Aguardar um pouco e mostrar informa√ß√µes √∫teis
    setTimeout(() => {
      this.showServerInfo();
    }, 5000);
  }

  showServerInfo() {
    console.log('\n' + '='.repeat(60));
    console.log('üéâ SERVIDOR INTERALPHA INICIADO COM SUCESSO!');
    console.log('='.repeat(60));
    console.log('üåê Aplica√ß√£o: http://localhost:3000');
    console.log('üìä Dashboard: http://localhost:3000/dashboard');
    console.log('üõçÔ∏è  Produtos: http://localhost:3000/produtos');
    console.log('üìã API Docs: http://localhost:3000/api');
    console.log('üîç Health Check: http://localhost:3000/api/system/health');
    console.log('üìà Monitoramento: http://localhost:3000/api/system/monitoring');
    console.log('='.repeat(60));
    console.log('üí° Dicas:');
    console.log('   - Use Ctrl+C para parar o servidor');
    console.log('   - Logs aparecem em tempo real');
    console.log('   - Hot reload ativo para desenvolvimento');
    console.log('   - Verifique o terminal para erros');
    console.log('='.repeat(60));
  }

  gracefulShutdown() {
    console.log('\nüõë Encerrando servidor...');
    
    if (this.serverProcess) {
      this.serverProcess.kill('SIGTERM');
      
      // For√ßar encerramento ap√≥s 5 segundos
      setTimeout(() => {
        if (this.serverProcess && !this.serverProcess.killed) {
          console.log('‚ö° For√ßando encerramento...');
          this.serverProcess.kill('SIGKILL');
        }
        process.exit(0);
      }, 5000);
    } else {
      process.exit(0);
    }
  }
}

// Executar inicializa√ß√£o
async function main() {
  const starter = new ServerStarter();
  await starter.start();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { ServerStarter };