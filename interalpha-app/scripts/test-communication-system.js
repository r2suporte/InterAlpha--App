const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testCommunicationSystem() {
  console.log('üß™ Testando Sistema de Comunica√ß√£o Interna...\n')

  try {
    // 1. Criar departamentos de teste
    console.log('1. Criando departamentos de teste...')
    
    const techDepartment = await prisma.department.upsert({
      where: { name: 'T√©cnico' },
      update: {},
      create: {
        name: 'T√©cnico',
        description: 'Departamento t√©cnico respons√°vel pelos servi√ßos',
        isActive: true
      }
    })

    const supportDepartment = await prisma.department.upsert({
      where: { name: 'Suporte' },
      update: {},
      create: {
        name: 'Suporte',
        description: 'Departamento de atendimento ao cliente',
        isActive: true
      }
    })

    console.log(`‚úÖ Departamentos criados: ${techDepartment.name}, ${supportDepartment.name}`)

    // 2. Criar funcion√°rios de teste
    console.log('\n2. Criando funcion√°rios de teste...')
    
    const employee1 = await prisma.employee.upsert({
      where: { email: 'joao.tecnico@interalpha.com' },
      update: {},
      create: {
        email: 'joao.tecnico@interalpha.com',
        name: 'Jo√£o Silva',
        role: 'TECNICO',
        department: 'T√©cnico',
        phone: '(11) 99999-1111',
        passwordHash: 'hashed_password_123',
        isActive: true
      }
    })

    const employee2 = await prisma.employee.upsert({
      where: { email: 'maria.atendente@interalpha.com' },
      update: {},
      create: {
        email: 'maria.atendente@interalpha.com',
        name: 'Maria Santos',
        role: 'ATENDENTE',
        department: 'Suporte',
        phone: '(11) 99999-2222',
        passwordHash: 'hashed_password_456',
        isActive: true
      }
    })

    console.log(`‚úÖ Funcion√°rios criados: ${employee1.name}, ${employee2.name}`)

    // 3. Criar cliente de teste
    console.log('\n3. Criando cliente de teste...')
    
    // Primeiro criar um usu√°rio
    const user = await prisma.user.upsert({
      where: { email: 'cliente.teste@email.com' },
      update: {},
      create: {
        clerkId: 'test_clerk_id_123',
        email: 'cliente.teste@email.com',
        name: 'Cliente Teste'
      }
    })

    const client = await prisma.cliente.upsert({
      where: { documento: '12345678901' },
      update: {},
      create: {
        nome: 'Cliente Teste',
        email: 'cliente.teste@email.com',
        telefone: '(11) 99999-0000',
        documento: '12345678901',
        tipoDocumento: 'CPF',
        userId: user.id
      }
    })

    console.log(`‚úÖ Cliente criado: ${client.nome}`)

    // 4. Testar mensagens diretas
    console.log('\n4. Testando mensagens diretas...')
    
    const directMessage = await prisma.message.create({
      data: {
        senderId: employee1.id,
        senderName: employee1.name,
        senderRole: employee1.role,
        recipientId: employee2.id,
        recipientName: employee2.name,
        subject: 'Teste de mensagem direta',
        content: 'Esta √© uma mensagem de teste entre funcion√°rios.',
        messageType: 'DIRECT',
        priority: 'NORMAL',
        status: 'SENT'
      }
    })

    console.log(`‚úÖ Mensagem direta criada: ${directMessage.subject}`)

    // 5. Testar mensagens de departamento
    console.log('\n5. Testando mensagens de departamento...')
    
    const departmentMessage = await prisma.message.create({
      data: {
        senderId: employee1.id,
        senderName: employee1.name,
        senderRole: employee1.role,
        departmentId: techDepartment.id,
        departmentName: techDepartment.name,
        subject: 'Reuni√£o de equipe',
        content: 'Pessoal, temos reuni√£o de equipe amanh√£ √†s 14h.',
        messageType: 'DEPARTMENT',
        priority: 'HIGH',
        status: 'SENT'
      }
    })

    console.log(`‚úÖ Mensagem de departamento criada: ${departmentMessage.subject}`)

    // 6. Testar sala de chat
    console.log('\n6. Testando sala de chat...')
    
    const chatRoom = await prisma.chatRoom.create({
      data: {
        name: 'Equipe T√©cnica',
        description: 'Chat da equipe t√©cnica',
        type: 'DEPARTMENT',
        departmentId: techDepartment.id,
        createdBy: employee1.id,
        settings: {
          allowFileUploads: true,
          maxFileSize: 10485760, // 10MB
          allowedFileTypes: ['image/*', 'application/pdf'],
          messageRetentionDays: 90,
          requireApproval: false,
          moderatorIds: [employee1.id]
        },
        participants: {
          create: [
            {
              userId: employee1.id,
              userName: employee1.name,
              userRole: employee1.role,
              permissions: {
                canSendMessages: true,
                canSendFiles: true,
                canDeleteOwnMessages: true,
                canDeleteAnyMessage: false,
                canManageParticipants: true,
                canArchiveRoom: false
              }
            }
          ]
        }
      }
    })

    console.log(`‚úÖ Sala de chat criada: ${chatRoom.name}`)

    // 7. Testar ticket de suporte
    console.log('\n7. Testando ticket de suporte...')
    
    const supportTicket = await prisma.supportTicket.create({
      data: {
        ticketNumber: '20250108-0001',
        clientId: client.id,
        clientName: client.nome,
        subject: 'Problema com servi√ßo',
        description: 'Estou com dificuldades para acessar o sistema.',
        category: 'TECHNICAL',
        priority: 'HIGH',
        status: 'OPEN',
        departmentId: supportDepartment.id,
        tags: ['acesso', 'sistema']
      }
    })

    console.log(`‚úÖ Ticket de suporte criado: #${supportTicket.ticketNumber}`)

    // 8. Atribuir ticket
    console.log('\n8. Atribuindo ticket...')
    
    const assignedTicket = await prisma.supportTicket.update({
      where: { id: supportTicket.id },
      data: {
        assignedTo: employee2.id,
        assignedToName: employee2.name,
        status: 'IN_PROGRESS'
      }
    })

    console.log(`‚úÖ Ticket atribu√≠do para: ${assignedTicket.assignedToName}`)

    // 9. Adicionar mensagem ao ticket
    console.log('\n9. Adicionando mensagem ao ticket...')
    
    const ticketMessage = await prisma.ticketMessage.create({
      data: {
        ticketId: supportTicket.id,
        senderId: employee2.id,
        senderName: employee2.name,
        content: 'Ol√°! Recebi seu ticket e vou ajud√°-lo com o problema de acesso.',
        isInternal: false
      }
    })

    console.log(`‚úÖ Mensagem adicionada ao ticket`)

    // 10. Testar prefer√™ncias de comunica√ß√£o
    console.log('\n10. Testando prefer√™ncias de comunica√ß√£o...')
    
    const commPrefs = await prisma.communicationPreferences.create({
      data: {
        userId: employee1.id,
        emailNotifications: true,
        pushNotifications: true,
        smsNotifications: false,
        notificationTypes: {
          directMessages: true,
          departmentMessages: true,
          supportTickets: true,
          systemMessages: false
        },
        quietHours: {
          enabled: true,
          startTime: '22:00',
          endTime: '08:00'
        }
      }
    })

    console.log(`‚úÖ Prefer√™ncias de comunica√ß√£o criadas`)

    // 11. Buscar estat√≠sticas
    console.log('\n11. Buscando estat√≠sticas...')
    
    const messageCount = await prisma.message.count()
    const ticketCount = await prisma.supportTicket.count()
    const chatRoomCount = await prisma.chatRoom.count()
    
    console.log(`üìä Estat√≠sticas:`)
    console.log(`   - Mensagens: ${messageCount}`)
    console.log(`   - Tickets: ${ticketCount}`)
    console.log(`   - Salas de chat: ${chatRoomCount}`)

    // 12. Testar busca de mensagens
    console.log('\n12. Testando busca de mensagens...')
    
    const messages = await prisma.message.findMany({
      where: {
        OR: [
          { senderId: employee1.id },
          { recipientId: employee1.id }
        ]
      },
      include: {
        sender: { select: { name: true, role: true } },
        recipient: { select: { name: true } },
        department: { select: { name: true } }
      },
      orderBy: { createdAt: 'desc' }
    })

    console.log(`‚úÖ Encontradas ${messages.length} mensagens para ${employee1.name}`)

    // 13. Testar busca de tickets
    console.log('\n13. Testando busca de tickets...')
    
    const tickets = await prisma.supportTicket.findMany({
      where: {
        OR: [
          { assignedTo: employee2.id },
          { departmentId: supportDepartment.id }
        ]
      },
      include: {
        client: { select: { nome: true } },
        assignedToUser: { select: { name: true } },
        department: { select: { name: true } },
        messages: {
          include: {
            sender: { select: { name: true } }
          }
        }
      }
    })

    console.log(`‚úÖ Encontrados ${tickets.length} tickets para o departamento de suporte`)

    console.log('\nüéâ Teste do Sistema de Comunica√ß√£o Interna conclu√≠do com sucesso!')
    console.log('\nüìã Resumo dos testes:')
    console.log('   ‚úÖ Departamentos criados')
    console.log('   ‚úÖ Funcion√°rios criados')
    console.log('   ‚úÖ Cliente criado')
    console.log('   ‚úÖ Mensagens diretas funcionando')
    console.log('   ‚úÖ Mensagens de departamento funcionando')
    console.log('   ‚úÖ Salas de chat funcionando')
    console.log('   ‚úÖ Tickets de suporte funcionando')
    console.log('   ‚úÖ Atribui√ß√£o de tickets funcionando')
    console.log('   ‚úÖ Mensagens em tickets funcionando')
    console.log('   ‚úÖ Prefer√™ncias de comunica√ß√£o funcionando')
    console.log('   ‚úÖ Estat√≠sticas funcionando')
    console.log('   ‚úÖ Buscas funcionando')

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Executar o teste
testCommunicationSystem()
  .catch((error) => {
    console.error('‚ùå Falha no teste:', error)
    process.exit(1)
  })