#!/usr/bin/env node

/**
 * Script simples para testar estrutura de upload
 */

const fs = require('fs')
const path = require('path')

function testUploadStructure() {
  console.log('üñºÔ∏è  Testando estrutura de upload de imagens...\n')

  try {
    // 1. Verificar e criar diret√≥rios
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'produtos')
    const thumbnailDir = path.join(uploadDir, 'thumbnails')
    
    console.log('1. Criando estrutura de diret√≥rios...')
    
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true })
      console.log('‚úÖ Diret√≥rio criado:', uploadDir)
    } else {
      console.log('‚úÖ Diret√≥rio existe:', uploadDir)
    }
    
    if (!fs.existsSync(thumbnailDir)) {
      fs.mkdirSync(thumbnailDir, { recursive: true })
      console.log('‚úÖ Diret√≥rio de thumbnails criado:', thumbnailDir)
    } else {
      console.log('‚úÖ Diret√≥rio de thumbnails existe:', thumbnailDir)
    }

    // 2. Testar permiss√µes de escrita
    console.log('\n2. Testando permiss√µes de escrita...')
    
    const testFile = path.join(uploadDir, 'test-permissions.txt')
    const testContent = 'Teste de permiss√µes de escrita'
    
    fs.writeFileSync(testFile, testContent)
    console.log('‚úÖ Arquivo de teste criado')
    
    const readContent = fs.readFileSync(testFile, 'utf8')
    console.log('‚úÖ Arquivo lido com sucesso:', readContent === testContent ? 'Conte√∫do correto' : 'Conte√∫do incorreto')
    
    fs.unlinkSync(testFile)
    console.log('‚úÖ Arquivo removido com sucesso')

    // 3. Verificar Sharp
    console.log('\n3. Verificando Sharp...')
    
    try {
      require.resolve('sharp')
      console.log('‚úÖ Sharp est√° instalado')
    } catch (error) {
      console.log('‚ö†Ô∏è  Sharp n√£o est√° instalado')
      console.log('   Para instalar: npm install sharp')
      console.log('   Sem Sharp, as imagens n√£o ser√£o otimizadas')
    }

    // 4. Testar configura√ß√µes
    console.log('\n4. Configura√ß√µes de upload:')
    console.log('‚úÖ Diret√≥rio base:', '/public/uploads/produtos')
    console.log('‚úÖ Diret√≥rio thumbnails:', '/public/uploads/produtos/thumbnails')
    console.log('‚úÖ Tipos aceitos: JPG, PNG, WebP')
    console.log('‚úÖ Tamanho m√°ximo: 5MB')
    console.log('‚úÖ URL p√∫blica: /uploads/produtos/[filename]')

    // 5. Estrutura da API
    console.log('\n5. Endpoints da API:')
    console.log('‚úÖ POST /api/produtos/upload - Upload de imagem')
    console.log('‚úÖ DELETE /api/produtos/upload?fileName=... - Remover imagem')
    console.log('‚úÖ Autentica√ß√£o: Obrigat√≥ria via Clerk')
    console.log('‚úÖ Valida√ß√£o: Tipo, tamanho e formato')

    console.log('\nüéâ Estrutura de upload configurada com sucesso!')
    console.log('\nüìã Pr√≥ximos passos:')
    console.log('   1. Instalar Sharp: npm install sharp')
    console.log('   2. Testar upload via interface')
    console.log('   3. Configurar limpeza autom√°tica')
    console.log('   4. Implementar CDN em produ√ß√£o')

  } catch (error) {
    console.error('‚ùå Erro:', error.message)
  }
}

testUploadStructure()