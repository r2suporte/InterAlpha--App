// üóÑÔ∏è Schema Prisma para SQLite (Desenvolvimento Local)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// üë§ Modelo de Usu√°rio (vers√£o SQLite)
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  role          String?        @default("user")
  phone         String?
  avatarUrl     String?        @map("avatar_url")
  isActive      Boolean?       @default(true) @map("is_active")
  password      String?        // Para desenvolvimento local
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  
  // Relacionamentos
  clientesCriados       Cliente[]      @relation("ClienteCreatedBy")
  ordensServicoTecnico  OrdemServico[] @relation("OrdemServicoTecnico")
  ordensServicoCriadas  OrdemServico[] @relation("OrdemServicoCreatedBy")
  pagamentosCriados     Pagamento[]    @relation("PagamentoCreatedBy")

  @@map("users")
}

// üè¢ Modelo de Cliente
model Cliente {
  id              String         @id @default(cuid())
  nome            String
  email           String?        @unique
  telefone        String?
  endereco        String?
  cidade          String?
  estado          String?
  cep             String?
  cpfCnpj         String?        @unique @map("cpf_cnpj")
  tipo            String?        @default("pessoa_fisica") // pessoa_fisica, pessoa_juridica
  observacoes     String?
  isActive        Boolean?       @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  createdById     String         @map("created_by_id")
  
  // Relacionamentos
  createdBy       User           @relation("ClienteCreatedBy", fields: [createdById], references: [id])
  ordensServico   OrdemServico[]
  pagamentos      Pagamento[]

  @@map("clientes")
}

// üîß Modelo de Ordem de Servi√ßo
model OrdemServico {
  id              String         @id @default(cuid())
  numero          String         @unique
  titulo          String
  descricao       String?
  status          String         @default("pendente") // pendente, em_andamento, concluida, cancelada
  prioridade      String?        @default("media") // baixa, media, alta, urgente
  valorOrcado     Float?         @map("valor_orcado")
  valorFinal      Float?         @map("valor_final")
  dataInicio      DateTime?      @map("data_inicio")
  dataConclusao   DateTime?      @map("data_conclusao")
  observacoes     String?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  clienteId       String         @map("cliente_id")
  tecnicoId       String?        @map("tecnico_id")
  createdById     String         @map("created_by_id")
  
  // Relacionamentos
  cliente         Cliente        @relation(fields: [clienteId], references: [id])
  tecnico         User?          @relation("OrdemServicoTecnico", fields: [tecnicoId], references: [id])
  createdBy       User           @relation("OrdemServicoCreatedBy", fields: [createdById], references: [id])
  pagamentos      Pagamento[]

  @@map("ordens_servico")
}

// üí∞ Modelo de Pagamento
model Pagamento {
  id              String         @id @default(cuid())
  valor           Float
  tipo            String         // receita, despesa
  categoria       String?
  descricao       String?
  metodoPagamento String?        @map("metodo_pagamento") // dinheiro, cartao, pix, transferencia
  status          String         @default("pendente") // pendente, pago, cancelado
  dataVencimento  DateTime       @map("data_vencimento")
  dataPagamento   DateTime?      @map("data_pagamento")
  observacoes     String?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  clienteId       String?        @map("cliente_id")
  ordemServicoId  String?        @map("ordem_servico_id")
  createdById     String         @map("created_by_id")
  
  // Relacionamentos
  cliente         Cliente?       @relation(fields: [clienteId], references: [id])
  ordemServico    OrdemServico?  @relation(fields: [ordemServicoId], references: [id])
  createdBy       User           @relation("PagamentoCreatedBy", fields: [createdById], references: [id])

  @@map("pagamentos")
}